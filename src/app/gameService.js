// GameService - orquestra칞칚o dos fluxos de jogo COM M츼QUINA DE ESTADOS
import GameRepository from '../data/gameRepo.js';
import { resolveRound, updateGameTotals } from '../domain/gameState.js';
import { getPlayerIndex } from '../domain/tournament.js';
import { 
  GAME_STATES, 
  createRoundState, 
  applyPlayerChoice, 
  addResult, 
  advanceToNext, 
  canAcceptChoice, 
  shouldShowResult, 
  canAdvance, 
  isGameComplete 
} from '../domain/gameStateMachine.js';
import eventBus from './eventBus.js';

class GameService {
  constructor() {
    this.gameRepo = new GameRepository();
    this.gameStates = new Map(); // Estados das rodadas em mem칩ria
  }

  // Conecta servi칞os
  async connect(firebaseConfig) {
    await this.gameRepo.connect(firebaseConfig);
  }

  // FLUXO: UI chama submitChoice COM M츼QUINA DE ESTADOS
  async submitChoice(player, gameKey, round, choice) {
    try {
      console.log('游꿢 M츼QUINA: submitChoice', { player, gameKey, round, choice });
      
      // Valida entrada
      if (!player || !gameKey || !round || !choice) {
        throw new Error('Par칙metros inv치lidos');
      }

      // Obt칠m estado atual da rodada
      const stateKey = `${gameKey}-${round}`;
      let roundState = this.gameStates.get(stateKey) || createRoundState(round);
      
      // Verifica se pode aceitar escolha
      const playerIndex = getPlayerIndex(gameKey, player) === 0 ? 'p1' : 'p2';
      if (!canAcceptChoice(roundState, playerIndex)) {
        console.log('游꿢 M츼QUINA: Escolha rejeitada - estado inv치lido', roundState.state);
        return;
      }

      // Aplica escolha na m치quina de estados
      roundState = applyPlayerChoice(roundState, playerIndex, choice);
      this.gameStates.set(stateKey, roundState);
      
      console.log('游꿢 M츼QUINA: Estado atualizado', roundState);

      // Salva no Firebase
      await this.gameRepo.submitChoice(player, gameKey, round, choice);
      
      // Se ambos escolheram, processa resultado
      if (roundState.state === GAME_STATES.SHOWING_RESULT) {
        this.processRoundResult(gameKey, round, roundState);
      }
      
      eventBus.emit('choiceSubmitted', { player, gameKey, round, choice });
    } catch (error) {
      eventBus.emit('error', { type: 'submitChoice', error });
    }
  }

  // Listener detecta mudan칞as e sincroniza com m치quina de estados
  setupGameListener(gameKey) {
    this.gameRepo.onGameChange(gameKey, (snapshot) => {
      const gameData = snapshot.val();
      if (!gameData) return;

      this.syncWithFirebase(gameKey, gameData);
    });
  }

  // Sincroniza dados do Firebase com m치quina de estados
  syncWithFirebase(gameKey, gameData) {
    console.log('游꿢 M츼QUINA: Sincronizando com Firebase', gameKey, gameData);
    
    // N칚o processa mais automaticamente - apenas eventos espec칤ficos
    eventBus.emit('gameUpdated', { gameKey, gameData });
  }

  // Processa resultado quando ambos jogadores escolheram
  processRoundResult(gameKey, round, roundState) {
    console.log('游꿢 M츼QUINA: Processando resultado da rodada', round);
    
    const [p1, p2] = gameKey.split('-');
    const p1Choice = roundState.choices.p1;
    const p2Choice = roundState.choices.p2;
    
    // Calcula pontos
    const roundData = {
      round,
      p1Choice,
      p2Choice,
      p1Points: null,
      p2Points: null,
      resolved: false
    };
    
    const resolvedRound = resolveRound(roundData);
    console.log('游꿢 M츼QUINA: Resultado calculado:', resolvedRound);
    
    // Atualiza m치quina de estados
    const stateKey = `${gameKey}-${round}`;
    const updatedState = addResult(roundState, {
      player1Choice: p1Choice,
      player2Choice: p2Choice,
      player1Points: resolvedRound.p1Points,
      player2Points: resolvedRound.p2Points
    });
    this.gameStates.set(stateKey, updatedState);
    
    // Salva resultado no Firebase
    this.gameRepo.processRoundResult(gameKey, round, {
      player1Choice: p1Choice,
      player2Choice: p2Choice,
      player1Points: resolvedRound.p1Points,
      player2Points: resolvedRound.p2Points
    });
    
    // COMANDA UI para mostrar resultado
    console.log('游꿢 M츼QUINA: Comandando UI para mostrar resultado');
    eventBus.emit('showGameResult', {
      gameKey,
      round,
      result: updatedState.result
    });
  }
  
  // Avan칞a para pr칩xima rodada (chamado pelo bot칚o da UI)
  advanceToNextRound(gameKey, currentRound) {
    console.log('游꿢 M츼QUINA: Avan칞ando para pr칩xima rodada', gameKey, currentRound);
    
    const stateKey = `${gameKey}-${currentRound}`;
    const currentState = this.gameStates.get(stateKey);
    
    if (!currentState || !canAdvance(currentState)) {
      console.log('游꿢 M츼QUINA: N칚o pode avan칞ar - estado inv치lido');
      return;
    }
    
    // Cria pr칩ximo estado
    const nextState = advanceToNext(currentState);
    
    if (isGameComplete(nextState)) {
      console.log('游꿢 M츼QUINA: Jogo completo!');
      eventBus.emit('showGameComplete', { gameKey });
    } else {
      // Inicia pr칩xima rodada
      const nextStateKey = `${gameKey}-${nextState.round}`;
      this.gameStates.set(nextStateKey, nextState);
      
      console.log('游꿢 M츼QUINA: Iniciando rodada', nextState.round);
      eventBus.emit('startNextRound', {
        gameKey,
        round: nextState.round
      });
    }
  }
  
  // M칠todo p칰blico para UI avan칞ar manualmente
  requestAdvanceRound(gameKey, currentRound) {
    this.advanceToNextRound(gameKey, currentRound);
  }

  // Para de escutar jogo
  stopListening(gameKey) {
    this.gameRepo.stopListening(gameKey);
  }
}

export default GameService;